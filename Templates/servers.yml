Description: >
  Abraham Ortiz / Udagram Project
  AWS_CloudFormation script to create servers stack

Parameters:

  EnvironmentName:
    Description: An environment name that will be prefixed to resources
    Type: String

# Mappings:
#   WebAppRegion:
#     us-west-2:
#       HVM64: ami-003634241a8fcdec0

Resources:

# Load Balancer Security Group
  LBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our load balancer
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

# Web Server Security Group
# Add ingress rules for bastion hosts
  WebServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to EC2 and SHH from bastion hosts
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        # Security Group Ingress rules for bastion hosts connection
        # - IpProtocol: tcp
        #   FromPort: 22
        #   ToPort: 22
        #   CidrIp:
        #     Fn::ImportValue: !Sub ${WebAppEnv}-BASTION0-CIDR
        # - IpProtocol: tcp
        #   FromPort: 22
        #   ToPort: 22
        #   CidrIp:
        #     Fn::ImportValue: !Sub ${WebAppEnv}-BASTION1-CIDR
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-WebServerSecGroup

# Web App Launch Configuration
# Review iam profiles and image id from mappings
  WebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install unzip awscli -y
          apt-get install apache2 -y
          systemctl start apache2.service
          cd /var/www/html
          aws s3 cp s3://udacity-demo-1/udacity.zip .
          unzip -o udacity.zip
      IamInstanceProfile:
        Fn::ImportValue: !Sub "${EnvironmentName}-IAM-NAME"
      SecurityGroups:
        - Ref: WebServerSecGroup
      BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: '10'
            DeleteOnTermination: true
      ImageId: ami-003634241a8fcdec0
      InstanceType: t3.small
  
# Web App Security Group
  WebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      MinSize: '4'
      MaxSize: '4'
      DesiredCapacity: '4'
      VPCZoneIdentifier:
        - Fn::ImportValue:
            !Sub "${EnvironmentName}-PRIV-NETS"
      LaunchConfigurationName: !Ref WebAppLaunchConfig
      TargetGroupARNs:
        - Ref: WebAppTargetGroup

# Web App Load Balancer
  WebAppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
      SecurityGroups:
        - Ref: LBSecGroup

# Listener
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: WebAppTargetGroup
      LoadBalancerArn: !Ref WebAppLB
      Port: '80'
      Protocol: HTTP

# Application Load Balancer Listener
  ALBListenerRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        Actions:
        - Type: forward
          TargetGroupArn: !Ref 'WebAppTargetGroup'
        Conditions:
        - Field: path-pattern
          Values: [/]
        ListenerArn: !Ref 'Listener'
        Priority: 1

# Web App Target Group 
  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: 
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-VPCID"

Outputs:

  LoadBalancerDNS:
    Value: !Join ["",['http://',!GetAtt WebAppLB.DNSName]]
    Export:
      Name: "DNS-URL"